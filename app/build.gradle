apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
//apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion build_versions.compile_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {

        applicationId "com.example.androidutils"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 5
        versionName "1.0.5"
        multiDexEnabled true

        resValue "string", "build_time", buildTime()
        resValue "string", "build_host", hostName()
        resValue "string", "build_revision", revision()
        resValue "string", "changelog", changelog()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    signingConfigs {

        def filePath = '../sign/keystore.jks'
        def pwd = properties.getProperty("sign.pwd")
        def alias = properties.getProperty("sign.alias")

        release {
            storeFile file(filePath)
            storePassword pwd
            keyAlias alias
            keyPassword pwd
        }

    }

    buildFeatures {
        viewBinding true
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            //当前模式
            buildConfigField 'boolean', 'IS_DEBUG', 'false'
            //是否输出日志
            buildConfigField("boolean", "LOG_ENABLE", "false")

            signingConfig signingConfigs.release
        }
        debug {
            //当前模式
            buildConfigField 'boolean', 'IS_DEBUG', 'true'
            //是否输出日志
            buildConfigField("boolean", "LOG_ENABLE", "true")

            signingConfig signingConfigs.release
        }
        develop {
            initWith debug
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "AndroidUtils_${variant.versionName}_${variant.buildType.name}.apk"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //Kotlin
    implementation deps.kotlin.stdlib
    implementation deps.core_ktx
    implementation deps.multidex

    //androidx
    implementation deps.app_compat
    implementation deps.material
    implementation deps.constraint_layout
    implementation deps.recyclerview
    implementation deps.rvadapterhelper

    implementation deps.fastjson

    //palette
    implementation 'androidx.palette:palette-ktx:1.0.0'

    //底部导航栏
    implementation files('libs/BottomNavigationViewEx_2.0.4_debug.aar')

    //图片加载框架
    //Glide
    api deps.glide.runtime
    kapt deps.glide.compiler

    implementation project(path: ':lib.core')

    implementation project(path: ':annotation')
    kapt project(path: ':compiler')

    debugImplementation project(path: ':lib.coreutils')
    developImplementation project(path: ':lib.coreutils')
    releaseImplementation 'io.github.zhangxinmin528.androidutils:coreutils:1.0.9'
}

static def buildTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

static def hostName() {
    return "${System.getProperty("user.name")}@${InetAddress.localHost.hostName}"
}


def revision() {
    def code = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = code
    }
    return code.toString()
}

/**
 * Generate a changelog string from the NEWS file
 * @return a string containing the latest changelog entry
 */
def changelog() {
    def newsFile = new File("NEWS")
    def line, output = "", started = false
    if (newsFile.exists()) {
        newsFile.withReader { reader ->
            while ((line = reader.readLine()) != null) {
                if (started && !line?.trim()) break
                if (started) {
                    if (output != "") output += "\\n"
                    output += line.trim()
                }
                if (line.contains("---")) started = true
            }
        }
    }
    return output
}
